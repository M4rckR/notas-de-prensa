---
export interface Props {
  categories: string[];
  selectedCategory: string;
}

const { categories, selectedCategory } = Astro.props;

// Función para obtener el texto de la categoría seleccionada
function getSelectedCategoryText(selectedCategory: string, categories: string[]) {
  if (selectedCategory === 'todas') {
    return 'Seleccionar categoría';
  }
  return categories.find(cat => cat.toLowerCase() === selectedCategory) || 'Seleccionar categoría';
}
---

<div class="bg-white rounded-lg shadow-md p-6">
  <!-- Título para desktop -->
  <h3 class="text-lg font-semibold text-gray-800 mb-4 hidden md:block">Filtrar por categoría</h3>
  
  <!-- Acordeón para móvil -->
  <div class="md:hidden">
    <button
      id="accordion-button"
      class="w-full flex items-center justify-between px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm text-gray-700"
      aria-expanded="false"
      aria-controls="accordion-content"
    >
      <span class="font-medium" id="selected-category-display">
        {getSelectedCategoryText(selectedCategory, categories)}
      </span>
      <svg 
        class="w-5 h-5 transition-transform duration-200" 
        id="accordion-arrow"
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </button>
    
    <div 
      id="accordion-content"
      class="hidden mt-2 border border-gray-200 rounded-md overflow-hidden"
    >
      <button 
        data-category="todas"
        class={`w-full text-left px-4 py-3 text-gray-700 hover:bg-gray-50 border-b border-gray-200 transition-colors ${
          selectedCategory === 'todas' ? 'bg-blue-50 text-blue-600 font-medium' : ''
        }`}
      >
        Seleccionar categoría
      </button>
      
      {categories.map((category, index) => (
        <button 
          data-category={category.toLowerCase()}
          class={`w-full text-left px-4 py-3 text-gray-700 hover:bg-gray-50 transition-colors ${
            index !== categories.length - 1 ? 'border-b border-gray-200' : ''
          } ${
            selectedCategory === category.toLowerCase() ? 'bg-blue-50 text-blue-600 font-medium' : ''
          }`}
        >
          {category}
        </button>
      ))}
    </div>
  </div>

  <!-- Lista de botones para desktop -->
  <div class="hidden md:block space-y-2">
    <button 
      data-category="todas"
      class={`w-full text-left px-4 py-2 rounded-md cursor-pointer transition-colors duration-200 ${
        selectedCategory === 'todas' 
          ? 'bg-[#034568] text-white' 
          : 'text-gray-700 hover:bg-gray-100'
      }`}
    >
      Todas las noticias
    </button>
    
    {categories.map((category) => (
      <button 
        data-category={category.toLowerCase()}
        class={`w-full text-left px-4 cursor-pointer py-2 rounded-md transition-colors duration-200 ${
          selectedCategory === category.toLowerCase() 
            ? 'bg-[#034568] text-white' 
            : 'text-gray-700 hover:bg-gray-100'
        }`}
      >
        {category}
      </button>
    ))}
  </div>
</div>

<script>
  let filterInitialized = false;

  function initCategoryFilter() {
    if (filterInitialized) {
      return;
    }

    const categoryButtons = document.querySelectorAll('button[data-category]') as NodeListOf<HTMLButtonElement>;
    const allNewsCards = document.querySelectorAll('[data-categoria]') as NodeListOf<HTMLElement>;
    const noResultsDiv = document.querySelector('.text-center.py-12') as HTMLElement;
    
    // Elementos del acordeón
    const accordionButton = document.getElementById('accordion-button');
    const accordionContent = document.getElementById('accordion-content');
    const accordionArrow = document.getElementById('accordion-arrow');
    const selectedCategoryDisplay = document.getElementById('selected-category-display');
    
    if (!categoryButtons.length || !allNewsCards.length) {
      console.warn('Category filter: No buttons or cards found');
      return;
    }

    // Función para toggle del acordeón
    function toggleAccordion() {
      if (!accordionButton || !accordionContent || !accordionArrow) return;
      
      const isExpanded = accordionButton.getAttribute('aria-expanded') === 'true';
      
      // Toggle el estado
      accordionButton.setAttribute('aria-expanded', (!isExpanded).toString());
      accordionContent.classList.toggle('hidden');
      accordionArrow.style.transform = isExpanded ? '' : 'rotate(180deg)';
    }

    // Función para cerrar el acordeón
    function closeAccordion() {
      if (!accordionButton || !accordionContent || !accordionArrow) return;
      
      accordionContent.classList.add('hidden');
      accordionButton.setAttribute('aria-expanded', 'false');
      accordionArrow.style.transform = '';
    }

    // Event listener para el botón del acordeón (solo toggle)
    if (accordionButton) {
      // Remover listeners previos
      accordionButton.replaceWith(accordionButton.cloneNode(true));
      const newAccordionButton = document.getElementById('accordion-button');
      
      if (newAccordionButton) {
        newAccordionButton.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          toggleAccordion();
        });
      }
    }
    
    // Event listeners para los botones de categoría
    categoryButtons.forEach(button => {
      // Crear nuevo listener para evitar acumulación
      const newButton = button.cloneNode(true) as HTMLButtonElement;
      button.parentNode?.replaceChild(newButton, button);
      
      newButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const categoria = this.dataset.category;
        if (!categoria) return;
        
        // Guardar posición del scroll
        const currentScrollPosition = window.scrollY;
        
        // Actualizar el texto del botón acordeón (obtener referencia fresca)
        const currentSelectedCategoryDisplay = document.getElementById('selected-category-display');
        if (currentSelectedCategoryDisplay) {
          if (categoria === 'todas') {
            currentSelectedCategoryDisplay.textContent = 'Seleccionar categoría';
          } else {
            currentSelectedCategoryDisplay.textContent = this.textContent?.trim() || 'Categoría';
          }
        }
        
        // Cerrar acordeón en móvil después de seleccionar
        closeAccordion();
        
        // Actualizar estado activo de TODOS los botones (incluyendo los nuevos)
        const allCategoryButtons = document.querySelectorAll('button[data-category]') as NodeListOf<HTMLButtonElement>;
        allCategoryButtons.forEach(btn => {
          const isMobile = btn.closest('.md\\:hidden');
          const isActive = btn.dataset.category === categoria;
          
          if (isMobile) {
            // Limpiar todas las clases primero
            btn.classList.remove('bg-blue-50', 'text-blue-600', 'font-medium');
            btn.classList.add('text-gray-700');
            
            // Agregar clases si está activo
            if (isActive) {
              btn.classList.remove('text-gray-700');
              btn.classList.add('bg-blue-50', 'text-blue-600', 'font-medium');
            }
          } else {
            // Para desktop
            btn.classList.remove('bg-[#034568]', 'text-white', 'text-gray-700', 'hover:bg-gray-100');
            
            if (isActive) {
              btn.classList.add('bg-[#034568]', 'text-white');
            } else {
              btn.classList.add('text-gray-700', 'hover:bg-gray-100');
            }
          }
        });
        
        // Filtrar noticias
        let visibleCards = 0;
        allNewsCards.forEach(card => {
          const cardCategoria = card.getAttribute('data-categoria')?.toLowerCase() || '';
          if (categoria === 'todas' || cardCategoria === categoria) {
            card.style.display = 'block';
            visibleCards++;
          } else {
            card.style.display = 'none';
          }
        });

        // Mostrar/ocultar mensaje de no resultados
        if (noResultsDiv) {
          noResultsDiv.style.display = visibleCards === 0 ? 'block' : 'none';
        }
        
        // Actualizar URL
        const newUrl = categoria === 'todas' ? '/' : `/?categoria=${categoria}`;
        window.history.pushState({}, '', newUrl);

        // Restaurar posición del scroll
        setTimeout(() => {
          window.scrollTo(0, currentScrollPosition);
        }, 50);
      });
    });

    // Manejar navegación del historial
    window.addEventListener('popstate', () => {
      const url = new URL(window.location.href);
      const categoria = url.searchParams.get('categoria') || 'todas';
      const targetButton = document.querySelector(`button[data-category="${categoria}"]`) as HTMLButtonElement;
      if (targetButton) {
        targetButton.click();
      }
    });

    filterInitialized = true;
    console.log('Category filter initialized');
  }

  function resetFilter() {
    filterInitialized = false;
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCategoryFilter);
  } else {
    initCategoryFilter();
  }

  // Reinicializar cuando se regresa a la página
  window.addEventListener('pageshow', function(event) {
    if (event.persisted || window.performance.navigation.type === 2) {
      resetFilter();
      setTimeout(initCategoryFilter, 100);
    }
  });

  // Reinicializar cuando cambia la URL
  let currentUrl = window.location.href;
  setInterval(() => {
    if (window.location.href !== currentUrl) {
      currentUrl = window.location.href;
      if (window.location.pathname === '/' || window.location.pathname === '') {
        resetFilter();
        setTimeout(initCategoryFilter, 100);
      }
    }
  }, 500);
</script> 